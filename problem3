#include <iostream>
#include <fstream>
#include <vector>
#include <omp.h>
#include <string>
#include <filesystem>
#include <mutex>


using namespace std;


bool isNotSorted(vector<int> nums);
vector<int> offsets(string filename, int threads);
string readFromFile(string fileName, int threads,vector<int>chunksAndFileSize);





vector<int> offsets(string fileName, int threads)
{
    filesystem::path filePath = fileName;
    //stores the fileSize in bytes
    std::streampos fileSize;
    vector<int> offsets(threads);
    int offset = 0;

    if(filesystem::exists(filePath))
    {
        fileSize = filesystem::file_size(filePath);
        cout << "The size of the file is: " << fileSize << " bytes " << endl;
        
    }

    int bytesPerThread = fileSize / threads;
    cout << "bytes per thread " << bytesPerThread << endl;
    //2 is the size per line, so for every byte in each thread we will have chunk lines
    int chunks = bytesPerThread / 2;
    cout << "chunks: " << chunks << endl;
    for(int i = 0; i < threads; i++)
    {
        //will have each value of where to start reading data from with each thread
        offsets[i] = chunks * i;
    }
    return offsets;

}

string readFromFile(string fileName, int threads,vector<streampos>offsets){
    
    
    string answer = "Sorted";
    mutex resultMutex;


    vector<int> firstVals(threads), lastVals(threads);
    vector<bool> hasData(threads, false);

    #pragma omp parallel
    {
        #pragma omp single
        {
            for(int i = 0; i < threads; i++)
            {
                #pragma omp task firstprivate(i)
                {
                    ifstream file(fileName);
                    file.seekg(offsets[i]);
                    
                    if(i != 0){
                        string dummy;
                        getline(file, dummy);
                    }
                    
                    vector<int> numbers;
                    string line;
                    streampos chunkEnd = offsets[i+1];
                    while(file.peek() != EOF && file.tellg() < chunkEnd){
                        streampos lineStart = file.tellg();
                        getline(file,line);
                    
                        if(!line.empty()){
                            numbers.push_back(stoi(line));
                        }

                        if(file.tellg() == -1 || file.tellg() >= chunkEnd) break;
                    
                    }

                    #pragma omp critical
                    {
                        cout << "Thread " << i << " loaded " << numbers.size() << " numbers " << endl;
                    }

                    if(!numbers.empty() && isNotSorted(numbers))
                    {
                        lock_guard<mutex> lock(resultMutex);
                        answer = "Not Sorted";
                    }


                }
            }
            #pragma omp taskwait
            for (int i = 0; i < threads - 1; i++){
                if(hasData[i] && hasData[i+1]){
                    if(lastVals[i] > firstVals[i+1]){
                        answer = "Not Sorted";
                        break;
                    }

                }
            }

        }
    }
    return answer;
}

bool isNotSorted(vector<int> nums)
{
    //assume that the list will be in descending order
    //means that elements will get smaller as you go further in the list.
        //elements are getting larger as you go further in the list so all other elements must follow suit.
        bool descending = nums[0] > nums[1];

        for(int i = 0; i < nums.size() - 1; i++){
            //qualities to make the list not sorted
            // if nums[i] < nums[i+1] and descending is true
            // if nums[i] > nums[i+1] and descending is false

            if((nums[i] < nums[i+1] && descending == true) || (nums[i] > nums[i+1] && descending == false)){
                return true;
            }
        }
    return false;
}



int main()
{
    int threads = omp_get_max_threads();
    

    //bytes of data in the file
    vector<int> offsetValues = offsets("prob3input.dat", threads);



    // string result = readFromFile("prob3input.dat", threads, offsetValues);
    // cout << (result) << endl;
}

